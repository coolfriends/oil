#!/usr/env/bin python
import argparse
import sys
import csv
import json


from oil import Oil
from oil.barrels import core_barrels
from oil.plugins import core_plugins


def parse_args():
    parser = argparse.ArgumentParser(
        description='oil - compliance cloud auditing tool'
    )
    choices = ['json', 'csv']
    parser.add_argument('--output',
                        help='set output as json or csv',
                        choices=choices,
                        default='json')
    parser.add_argument('--file-name', '-f',
                        help='save to file')
    return parser.parse_args()


def flattened_scan_data(scan_data):
    for provider, services in scan_data.items():
        for service, calls in services.items():
            for call, results in calls.items():
                for result in results:
                    row = {
                        'provider': provider,
                        'service': service,
                        'title': call,
                        'region': result['region'],
                        'resource': result['resource'],
                        'severity': result['severity'],
                        'message': result['message']
                    }
                    yield row


def output_csv(scan_data, out_file):
    fields = (
        'provider',
        'service',
        'title',
        'region',
        'resource',
        'severity',
        'message'
    )

    writer = csv.DictWriter(out_file, fieldnames=fields)
    writer.writeheader()
    for row in flattened_scan_data(scan_data):
        writer.writerow(row)


if __name__ == '__main__':
    args = parse_args()

    oil = Oil()
    for barrel in core_barrels:
        oil.register_barrel(barrel)

    for plugin in core_plugins:
        oil.register_plugin(plugin)

    scan_data = oil.scan()

    out_file = sys.stdout
    if args.file_name:
        out_file = open(args.file_name, 'w')

    if args.output == 'csv':
        output_csv(scan_data, out_file)
    elif args.output == 'json':
        json.dump(scan_data, out_file, indent=2)
    else:
        print('Unsupported output format.')
